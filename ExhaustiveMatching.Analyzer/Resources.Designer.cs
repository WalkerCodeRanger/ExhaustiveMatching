//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExhaustiveMatching.Analyzer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ExhaustiveMatching.Analyzer.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An switch statement on an enum type marked as exhustive by throwing InvalidEnumArgumentException or ExhaustiveMatchFailedException is not exhustive. It omits one or more enum values from the cases..
        /// </summary>
        internal static string EM001Description {
            get {
                return ResourceManager.GetString("EM001Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum value not processed by switch: {0}.
        /// </summary>
        internal static string EM001Message {
            get {
                return ResourceManager.GetString("EM001Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch on Enum Not Exhaustive.
        /// </summary>
        internal static string EM001Title {
            get {
                return ResourceManager.GetString("EM001Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An switch statement on a closed type marked as exhaustive by throwing ExhaustiveMatchFailedException is not exhaustive. It will fail to match one or more possible types..
        /// </summary>
        internal static string EM002Description {
            get {
                return ResourceManager.GetString("EM002Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subtypes not processed by switch: {0}.
        /// </summary>
        internal static string EM002Message {
            get {
                return ResourceManager.GetString("EM002Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch on Closed Type Not Exhaustive.
        /// </summary>
        internal static string EM002Title {
            get {
                return ResourceManager.GetString("EM002Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A subtype of a type marked with the &quot;Closed&quot; attribute must be a case of the closed type..
        /// </summary>
        internal static string EM011Description {
            get {
                return ResourceManager.GetString("EM011Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a case of its closed supertype: {1}.
        /// </summary>
        internal static string EM011Message {
            get {
                return ResourceManager.GetString("EM011Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subtype of a Closed Type Must Be a Case.
        /// </summary>
        internal static string EM011Title {
            get {
                return ResourceManager.GetString("EM011Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A closed type&apos;s case must all be direct subtypes of the closed type. That is, it must inherit from the class or implement the interface..
        /// </summary>
        internal static string EM012Description {
            get {
                return ResourceManager.GetString("EM012Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closed type case is not a direct subtype: {0}.
        /// </summary>
        internal static string EM012Message {
            get {
                return ResourceManager.GetString("EM012Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closed Type Case Must Be a Direct Subtype.
        /// </summary>
        internal static string EM012Title {
            get {
                return ResourceManager.GetString("EM012Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exhustive switch statement does not support case clauses with &quot;when&quot; guards.
        /// </summary>
        internal static string EM100Description {
            get {
                return ResourceManager.GetString("EM100Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When guard is not supported in an exhaustive switch.
        /// </summary>
        internal static string EM100Message {
            get {
                return ResourceManager.GetString("EM100Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When Guards Not Supported.
        /// </summary>
        internal static string EM100Title {
            get {
                return ResourceManager.GetString("EM100Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type of case clause is not supported in exhaustive switch statements. Only &quot;case Type name:&quot; and &quot;case null:&quot; are supported..
        /// </summary>
        internal static string EM101Description {
            get {
                return ResourceManager.GetString("EM101Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Case clause type not supported in exhaustive switch: {0}.
        /// </summary>
        internal static string EM101Message {
            get {
                return ResourceManager.GetString("EM101Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported Case Clause Type.
        /// </summary>
        internal static string EM101Title {
            get {
                return ResourceManager.GetString("EM101Title", resourceCulture);
            }
        }
    }
}
